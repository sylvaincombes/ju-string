{
  "version": 3,
  "sources": [
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/string.js"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n * Simple utility for the String javascript object\n *\n * @author Sylvain Combes <combes.sylvain@gmail.com>\n * @module ju-string\n */\n\n/**\n * Collection of utils for string object\n *\n * @constructor\n */\nfunction Str() {\n    \"use strict\";\n\n    /**\n     * Trim blank spaces at the beginning and end of a string\n     *\n     * @example\n     * ju.string.trim(' foo bar '); // return 'foo bar'\n     *\n     * @param {string} string The string to trim\n     *\n     * @return {string}\n     */\n    Str.prototype.trim = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        if (String.hasOwnProperty('trim') && String.prototype.trim) {\n            return string.trim();\n        }\n        return string.replace(/^\\s+|\\s+$/g, '');\n    };\n\n\n    /**\n     * Remove left spaces of the string\n     *\n     * @example\n     * ju.string.trimLeft(' foo bar '); // return 'foo bar '\n     *\n     * @param {string} string The string to modify\n     *\n     * @return {string}\n     */\n    Str.prototype.trimLeft = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/^\\s+/, '');\n    };\n\n    /**\n     * Remove the right spaces of a string\n     *\n     * @example\n     * ju.string.trimRight(' foo bar '); // return ' foo bar'\n     *\n     * @param {string} string The string to modify\n     *\n     * @return {string}\n     */\n    Str.prototype.trimRight = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/\\s+$/, '');\n    };\n\n\n    /**\n     * Remove spaces at the beginning and the end of a string and all redundant spaces\n     *\n     * @example\n     * ju.string.trimFull('  foo    bar  '); // return 'foo bar'\n     *\n     * @param {string} string The string to modify\n     *\n     * @return {string}\n     */\n    Str.prototype.trimFull = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g, '').replace(/\\s+/g, ' ');\n    };\n\n    /**\n     * Uppercase the first character of the string\n     *\n     * @example\n     * ju.string.toUpperCaseFirst('foo bar'); // return 'Foo bar'\n     *\n     * @param {string} string The string to modify\n     *\n     * @return {string}\n     */\n    Str.prototype.toUpperCaseFirst = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return (string.charAt(0).toUpperCase() + string.slice(1));\n    };\n\n    /**\n     * Uppercase the first character of each word found in the string\n     *\n     * @example\n     * ju.string.toUpperCaseWords('foo bar size'); // return 'Foo Bar Size'\n     *\n     * @param {string} string The string to modify\n     *\n     * @return {string}\n     */\n    Str.prototype.toUpperCaseWords = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/^([a-z\\u00E0-\\u00FC])|\\s+([a-z\\u00E0-\\u00FC])/g, function ($1) {\n            return $1.toUpperCase();\n        });\n    };\n\n    /**\n     * Return true if the string contains passed arguments, false otherwise\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n     *\n     * @example\n     * ju.string.contains('foo bar size', 'foo'); // return true\n     * ju.string.contains('foo bar size', 'z3w'); // return false\n     *\n     * @param {string} inputString The string we want to search in\n     * @param {string} searchedString The string to check if it is contained in the inputString string\n     *\n     * @return {boolean} True if inputString contains searchedString, false otherwhise\n     */\n    Str.prototype.contains = function (inputString, searchedString) {\n        if(typeof inputString !== 'string') {\n            throw new TypeError('Invalid first argument type, must be string.');\n        }\n\n        if(typeof searchedString !== 'string') {\n            throw new TypeError('Invalid second argument type, must be string.');\n        }\n\n        if (String.hasOwnProperty('contains') && String.prototype.contains) {\n            return inputString.contains(searchedString);\n        }\n        return inputString.indexOf(searchedString) !== -1;\n    };\n\n\n    /**\n     * Return if the searched string is at the beginning of a string\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n     *\n     * @example\n     * ju.string.startsWith('foo bar size', 'foo'); // return true\n     *\n     * @param {string} inputString The string we want to search in\n     * @param {string} searchedString The string to test if it matches the start of inputString\n     * @param {number} [position=0] The start position to check, 0 by default\n     *\n     * @return {boolean}\n     */\n    Str.prototype.startsWith = function (inputString, searchedString, position) {\n        if(typeof inputString !== 'string') {\n            throw new TypeError('Invalid first argument type, must be string.');\n        }\n\n        if(typeof searchedString !== 'string') {\n            throw new TypeError('Invalid second argument type, must be string.');\n        }\n\n        if (String.hasOwnProperty('startsWith') && String.prototype.startsWith) {\n            return inputString.startsWith(searchedString);\n        }\n        position = position || 0;\n        return inputString.lastIndexOf(searchedString, position) === position;\n    };\n\n\n    /**\n     * Return if the searched string is at the end of a string\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n     *\n     * @example\n     * ju.string.endsWith('foo bar size', 'size'); // return true\n     *\n     * @param {string} inputString The string we want to search in\n     * @param {string} searchedString The string to test if it matches the end of inputString\n     * @param {number} [position=inputString.length] The end position to check, inputString.length by default\n     *\n     * @return {boolean}\n     */\n    Str.prototype.endsWith = function (inputString, searchedString, position) {\n        if(typeof inputString !== 'string') {\n            throw new TypeError('Invalid first argument type, must be string.');\n        }\n\n        if(typeof searchedString !== 'string') {\n            throw new TypeError('Invalid second argument type, must be string.');\n        }\n\n        if (String.hasOwnProperty('endsWith') && String.prototype.endsWith) {\n            return inputString.endsWith(searchedString);\n        }\n\n        var subjectString = inputString.toString();\n        if (position === undefined || position > subjectString.length) {\n            position = subjectString.length;\n        }\n\n        position -= searchedString.length;\n        var lastIndex = subjectString.indexOf(searchedString, position);\n\n        return lastIndex !== -1 && lastIndex === position;\n    };\n\n\n    /**\n     * Repeat a string for x times (count parameter)\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n     *\n     * @example\n     * ju.string.repeat('foo bar ', 2); // return 'foo bar foo bar '\n     *\n     * @param {string} string The string to repeat\n     * @param {number} count The number of time to repeat\n     *\n     * @return {string}\n     */\n    Str.prototype.repeat = function (string, count) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid first argument type, must be string.');\n        }\n\n        if(typeof count !== 'number') {\n            throw new TypeError('Invalid second argument type, must be number.');\n        }\n\n        if (String.hasOwnProperty('repeat') && String.prototype.repeat) {\n            return string.repeat(count);\n        }\n\n        var str = string;\n\n        count = +count;\n\n        if (count != count) {\n            count = 0;\n        }\n\n        if (count < 0) {\n            throw new RangeError(\"repeat count must be non-negative\");\n        }\n\n        if (count == Infinity) {\n            throw new RangeError(\"repeat count must be less than infinity\");\n        }\n\n        count = Math.floor(count);\n\n        if (str.length === 0 || count === 0) {\n            return \"\";\n        }\n\n        // Ensuring count is a 31-bit integer allows us to heavily optimize the\n        // main part. But anyway, most current (august 2014) browsers can't handle\n        // strings 1 << 28 chars or longer, so :\n        if (str.length * count >= 1 << 28) {\n            throw new RangeError(\"repeat count must not overflow maximum string size\");\n        }\n\n        var rpt = \"\";\n\n        for (; ;) {\n            if ((count & 1) == 1) {\n                rpt += str;\n            }\n            count >>>= 1;\n            if (count === 0) {\n                break;\n            }\n            str += str;\n        }\n        return rpt;\n    };\n\n    /**\n     * Reverse a string\n     *\n     * @example\n     * ju.string.reverse('bodyboard'); // return 'draobydob'\n     *\n     * @param {string} string The string to reverse\n     * @return {string}\n     */\n    Str.prototype.reverse = function(string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.split('').reverse().join('');\n    };\n\n\n    /**\n     * Transform new lines to br html tag\n     *\n     * @see http://phpjs.org/functions/nl2br/ (modified)\n     *\n     * @example\n     * ju.string.nl2br('foo\\n bar'); // return 'foo<br /> bar'\n     *\n     * @param {string} string The string to parse\n     * @param {boolean} [is_xhtml=true] Use autoclose br tag or not (optional, true by default)\n     *\n     * @return {string}\n     */\n    Str.prototype.nl2br = function nl2br(string, is_xhtml) {\n        var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(new RegExp('\\r\\n|\\n\\r|\\r|\\n', 'g'), breakTag);\n    };\n\n    /**\n     * Remove html tags from a string\n     *\n     * @param {string} string The string we want to remove tags\n     * @return {string} The string without the tags\n     */\n    Str.prototype.stripTags = function (string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/<\\/?[^>]+>/g, '');\n    };\n\n    /**\n     * Converts HTML special characters to their entity equivalents.\n     *\n     * @example\n     * ju.string.escapeHTML('<div class=\"article\">This is an article</div>'); // return '&lt;div class=\"article\"&gt;This is an article&lt;/div&gt;'\n     *\n     * @see https://github.com/sstephenson/prototype/blob/d9411e5/src/prototype/lang/string.js#L408\n     *\n     * @param {string} string\n     * @return {string}\n     */\n    Str.prototype.escapeHTML = function(string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    };\n\n    /**\n     * Converts the entity forms of special HTML characters to their normal form.\n     *\n     * @example\n     * ju.string.escapeHTML('&lt;div class=\"article\"&gt;This is an article&lt;/div&gt;'); // return '<div class=\"article\">This is an article</div>'\n     *\n     * @see https://github.com/sstephenson/prototype/blob/d9411e5/src/prototype/lang/string.js#L426\n     *\n     * @param {string} string\n     * @return {string}\n     */\n    Str.prototype.unescapeHTML = function(string) {\n        if(typeof string !== 'string') {\n            throw new TypeError('Invalid argument type, must be string.');\n        }\n\n        return string.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');\n    };\n\n    /**\n     * Return the levenshtein distance between two strings\n     *\n     * @see http://en.wikipedia.org/wiki/Levenshtein_distance\n     *\n     * @example\n     * ju.string.levenshtein('karolin', 'kathrin'); // return 3\n     *\n     * @param firstString   First string to compare to second String\n     * @param secondString  Second string to compare to string1\n     * @return {number}     The levenshtein distance\n     */\n    Str.prototype.levenshtein = function (firstString, secondString) {\n        if(typeof firstString !== 'string') {\n            throw new TypeError('Invalid first argument type, must be string.');\n        }\n\n        if(typeof secondString !== 'string') {\n            throw new TypeError('Invalid second argument type, must be string.');\n        }\n\n        var current = [],\n            firstStringLength = firstString.length,\n            secondStringLength = secondString.length,\n            prev = 0,\n            value = 0;\n\n        // Special cases\n\n        // if the two string are the same or the two strings have a length of 0, the distance is 0\n        if (firstString === secondString || (firstStringLength === 0 && secondStringLength === 0)) {\n            return 0;\n        }\n\n        // If one of the string length is 0, the distance is the length of the other string\n        if (firstStringLength === 0) {\n            return secondStringLength;\n        }\n\n        if (secondStringLength === 0) {\n            return firstStringLength;\n        }\n\n        // calculate levenshtein distance\n        for (var i = 0; i <= secondStringLength; i++) {\n            for (var j = 0; j <= firstStringLength; j++) {\n                if (i && j) {\n                    if (firstString.charAt(j - 1) === secondString.charAt(i - 1)) {\n                        value = prev;\n                    } else {\n                        value = Math.min(current[j], current[j - 1], prev) + 1;\n                    }\n                } else {\n                    value = i + j;\n                }\n                prev = current[j];\n                current[j] = value;\n            }\n        }\n\n        return current.pop();\n    };\n\n    /**\n     * Generate a uuid and return it\n     *\n     * @see http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript for more details.\n     *\n     * @example\n     * ju.string.uuid(); // return something like : \"3bce4931-6c75-41ab-afe0-2ec108a30860\"\n     *\n     * @return {string} uuid\n     */\n    Str.prototype.uuid = function () {\n        var matcher = /[xy]/g;\n\n        var replacer = function (c) {\n            var r = Math.random() * 16 | 0;\n            var v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        };\n\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(matcher, replacer);\n    };\n}\n\nmodule.exports = new Str();"
  ]
}